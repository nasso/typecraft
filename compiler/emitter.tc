let M = any {}

let LUA_OPS = any {
  ["pos"]    = "",
  ["neg"]    = "-",
  ["not"]    = "not ",
  ["len"]    = "#",
  ["add"]    = "+",
  ["sub"]    = "-",
  ["mul"]    = "*",
  ["div"]    = "/",
  ["idiv"]   = "//",
  ["mod"]    = "%",
  ["pow"]    = "^",
  ["concat"] = "..",
  ["or"]     = " or ",
  ["and"]    = " and ",
  ["eq"]     = "==",
  ["neq"]    = "~=",
  ["lte"]    = "<=",
  ["gte"]    = ">=",
  ["lt"]     = "<",
  ["gt"]     = ">",
}

let LUA_RESERVED = any {
  ["and"]      = true,
  ["break"]    = true,
  ["do"]       = true,
  ["else"]     = true,
  ["elseif"]   = true,
  ["end"]      = true,
  ["false"]    = true,
  ["for"]      = true,
  ["function"] = true,
  ["goto"]     = true,
  ["if"]       = true,
  ["in"]       = true,
  ["local"]    = true,
  ["nil"]      = true,
  ["not"]      = true,
  ["or"]       = true,
  ["repeat"]   = true,
  ["return"]   = true,
  ["then"]     = true,
  ["true"]     = true,
  ["until"]    = true,
  ["while"]    = true,
}

fn isSafeLuaName(name: any) {
  if (LUA_RESERVED[name]) { return false }
  if (!string.match(name, "^%a[%w_]*$")) { return false }

  return true
}

let IDENT_TYPE_VAR = 1
let IDENT_TYPE_IMPLICIT = 2
let IDENT_TYPE_LABEL = 3

fn genIdentifier(st: any, block: any, id: any) {
  let identType = IDENT_TYPE_VAR

  if (!id) {
    ; --> genIdentifier(st, var)

    let var = block

    if (var.ident) { return var.ident }

    block = var.b
    id = var.i
    if (var.ty == "label") {
      identType = IDENT_TYPE_LABEL
    } elseif (var.implicit) {
      identType = IDENT_TYPE_IMPLICIT
    }
  }

  let key = any { string.format("%x.%x", identType, id) }

  while (block.parent) {
    key[#key + 1] = string.format(".%x", block.i)
    block = block.parent
  }

  key = table.concat(key)

  let ident = st.idents[key]
  if (ident) { return ident }

  if (identType == IDENT_TYPE_VAR) {
    st.vc = st.vc + 1
    ident = string.format("v_%x", st.vc)
  } elseif (identType == IDENT_TYPE_IMPLICIT) {
    st.ic = st.ic + 1
    ident = string.format("i_%x", st.ic)
  } elseif (identType == IDENT_TYPE_LABEL) {
    st.lc = st.lc + 1
    ident = string.format("l_%x", st.lc)
  } else {
    error("unknown identifier type: " .. identType, 0)
  }

  st.idents[key] = ident
  return ident
}

M.emit = fn(any h, any block, any pretty) {
  let st = any {}
  st.vc = 0
  st.ic = 0
  st.lc = 0
  st.idents = any {}
  st.w = fn(any ...) {
    return h.write(h, table.concat(table.pack(...)))
  }

  if (pretty) {
    let nestLvl = 0
    st.beginStmt = fn() {
      st.w(string.rep("  ", nestLvl))
    }
    st.endStmt = fn() { st.w(";\n") }
    st.beginBlock = fn() {
      nestLvl = nestLvl + 1
      st.w("\n")
    }
    st.endBlock = fn() {
      nestLvl = nestLvl - 1
      st.w(string.rep("  ", nestLvl))
    }
  } else {
    let nop = fn() {}
    st.beginStmt = nop
    st.endStmt = fn() { st.w(";") }
    st.beginBlock = nop
    st.endBlock = nop
  }

  M.emitBlock(st, block)
}

M.emitBlock = fn(any st, any block) {
  if (#block.stmts > 0 && block.vc > 0) {
    st.beginStmt()
    st.w("local ")

    let i = 1
    while (i <= block.vc) {
      let name = genIdentifier(st, block, i)
      st.w(name)
      if (i < block.vc) { st.w(",") }
      i = i + 1
    }
    st.endStmt()
  }

  let i = 1
  while (i <= #block.stmts) {
    M.emitStatement(st, block.stmts[i], i == #block.stmts)
    i = i + 1
  }
}

M.emitStatement = fn(st: any, stmt: any, tail: any) {
  st.beginStmt()
  if (stmt.ty == "call") {
    M.emitCall(st, stmt.expr)
  } elseif (stmt.ty == "store") {
    M.emitStore(st, stmt)
  } elseif (stmt.ty == "return") {
    if (!tail) { st.w("do return") }
    else       { st.w("return") }
    let i = 1
    while (i <= #stmt.exprs) {
      if (i == 1) { st.w(" ") }
      else        { st.w(",") }
      M.emitExpr(st, stmt.exprs[i])
      i = i + 1
    }
    if (!tail) { st.w(" end") }
  } elseif (stmt.ty == "conditional") {
    let i = 1
    while (i <= #stmt.branches) {
      let branch = stmt.branches[i]
      if (i == 1) {
        st.w("if ")
      } elseif (branch.cond) {
        st.w("elseif ")
      } else {
        st.w("else ")
      }
      if (branch.cond) {
        M.emitExpr(st, branch.cond)
        st.w(" then")
      }
      st.beginBlock()
      M.emitBlock(st, branch.block)
      st.endBlock()
      i = i + 1
    }
    st.w("end")
  } elseif (stmt.ty == "while") {
    st.w("while ")
    M.emitExpr(st, stmt.cond)
    st.w(" do")
    st.beginBlock()
    M.emitBlock(st, stmt.block)
    st.endBlock()
    st.w("end")
  } elseif (stmt.ty == "for") {
    st.w("for ")
    M.emitExpr(st, stmt.var)
    st.w("=")
    M.emitExpr(st, stmt.init)
    st.w(",")
    M.emitExpr(st, stmt.limit)
    if (stmt.step) {
      st.w(",")
      M.emitExpr(st, stmt.step)
    }
    st.w(" do")
    st.beginBlock()
    M.emitBlock(st, stmt.block)
    st.endBlock()
    st.w("end")
  } elseif (stmt.ty == "for_in") {
    st.w("for ")
    let i = 1
    while (i <= #stmt.vars) {
      if (i > 1) { st.w(",") }
      M.emitExpr(st, stmt.vars[i])
      i = i + 1
    }
    st.w(" in ")
    M.emitExpr(st, stmt.expr)
    st.w(" do")
    st.beginBlock()
    M.emitBlock(st, stmt.block)
    st.endBlock()
    st.w("end")
  } elseif (stmt.ty == "break") {
    st.w("break")
  } elseif (stmt.ty == "label") {
    let name = genIdentifier(st, stmt)
    if (!name) {
      error("label '" .. stmt.i .. "' doesn't exist", 0)
    }
    st.w("::", name, "::")
  } elseif (stmt.ty == "goto") {
    let name = genIdentifier(st, stmt.label)
    st.w("goto ", name)
  } else {
    error("[emit] unsupported statement: '" .. stmt.ty .. "'", 0)
  }
  st.endStmt()
}

M.emitStore = fn(any st, any stmt) {
  let i = 1
  while (i <= #stmt.lvals) {
    let expr = stmt.lvals[i]
    if (i > 1) { st.w(",") }
    M.emitExpr(st, expr)
    i = i + 1
  }

  st.w("=")

  i = 1
  while (i <= #stmt.rvals) {
    let expr = stmt.rvals[i]
    if (i > 1) { st.w(",") }
    M.emitExpr(st, expr)
    i = i + 1
  }
}

M.emitExpr = fn(any st, any expr) {
  if (expr.ty == "literal") {
    st.w("(", textutils.serialize(expr.value), ")")
  } elseif (expr.ty == "vararg") {
    st.w("...")
  } elseif (expr.ty == "function") {
    st.w("function(")
    let i = 1
    while (i <= #expr.params) {
      let param = expr.params[i]
      let paramName = genIdentifier(st, param)
      if (i > 1) { st.w(",") }
      st.w(paramName)
      i = i + 1
    }
    if (expr.variadic) {
      if (#expr.params > 0) {
        st.w(",")
      }
      st.w("...")
    }
    st.w(")")
    st.beginBlock()
    M.emitBlock(st, expr.body)
    st.endBlock()
    st.w("end")
  } elseif (expr.ty == "index") {
    M.emitExpr(st, expr.tbl)
    if (
      expr.idx.ty == "literal" &&
      type(expr.idx.value) == "string" &&
      isSafeLuaName(expr.idx.value)
    ) {
      st.w(".", expr.idx.value)
    } else {
      st.w("[")
      M.emitExpr(st, expr.idx)
      st.w("]")
    }
  } elseif (expr.ty == "call") {
    M.emitCall(st, expr)
  } elseif (expr.ty == "var") {
    let name = genIdentifier(st, expr)
    if (!name) {
      error("variable '" .. expr.i .. "' doesn't exist", 0)
    }
    st.w(name)
  } elseif (expr.ty == "table") {
    st.w("({")
    let i = 1
    while (i <= #expr.entries) {
      let entry = expr.entries[i]
      if (i > 1) { st.w(",") }
      if (type(entry.key) == "string") {
        st.w("[", string.format("%q", entry.key), "]=")
      } elseif (entry.key) {
        st.w("[")
        M.emitExpr(st, entry.key)
        st.w("]=")
      }
      M.emitExpr(st, entry.value)
      i = i + 1
    }
    st.w("})")
  } elseif (expr.ty == "unop") {
    st.w("(")
    st.w(LUA_OPS[expr.op])
    M.emitExpr(st, expr.expr)
    st.w(")")
  } elseif (expr.ty == "binop") {
    st.w("(")
    M.emitExpr(st, expr.lhs)
    st.w(LUA_OPS[expr.op])
    M.emitExpr(st, expr.rhs)
    st.w(")")
  } else {
    error("[emit] unsupported expression: '" .. expr.ty .. "'", 0)
  }
}

M.emitCall = fn(any st, any expr) {
  M.emitExpr(st, expr.callee)
  st.w("(")
  let i = 1
  while (i <= #expr.args) {
    let arg = expr.args[i]
    if (i > 1) { st.w(",") }
    M.emitExpr(st, arg)
    i = i + 1
  }
  st.w(")")
}

return M
