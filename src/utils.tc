let M = any {}

M.split = fn(any txt, any chr) {
  let lines = any {}
  let i, j = 1, string.find(txt, chr, 1, true)

  while (j) {
    let line = string.sub(txt, i, j - 1)

    table.insert(lines, line)

    i = j + 1
    j = string.find(txt, chr, i, true)
  }

  table.insert(lines, string.sub(txt, i))
  return lines
}

M.ttyRead = fn() {
  let lines = any {}

  parallel.waitForAny(
    fn() {
      while (true) {
        table.insert(lines, read())
      }
    },
    fn() {
      let ctrl = false

      while (true) {
        let e, k, held = os.pullEvent("key")
        let down = e == "key"
        let up = e == "key_up"

        if ((down || up) && !held) {
          if (k == keys.leftCtrl) {
            ctrl = down
          } elseif (k == keys.rightCtrl) {
            ctrl = down
          } elseif (ctrl && k == keys.d) {
            return
          }
        }
      }
    },
  )

  return table.concat(lines, "\n")
}

M.ttyDisplay = fn(any txt) {
  let w, h = term.getSize()
  let running = true
  let scrollX = 0
  let scrollY = 0
  let lines = M.split(txt, "\n")

  term.setCursorBlink(false)

  while (running) {
    term.clear()

    let i = 1
    while (i <= h && i + scrollY <= #lines) {
      let line = lines[i + scrollY]
      line = string.sub(line, 1 + scrollX, w + scrollX)

      term.setCursorPos(1, i)
      term.write(line)
      i = i + 1
    }

    let e, c = os.pullEvent("char")

    if (c == "h") {
      scrollX = scrollX - 1
    } elseif (c == "j") {
      scrollY = scrollY + 1
    } elseif (c == "d") {
      scrollY = scrollY + 5
    } elseif (c == "k") {
      scrollY = scrollY - 1
    } elseif (c == "u") {
      scrollY = scrollY - 5
    } elseif (c == "l") {
      scrollX = scrollX + 1
    } elseif (c == "g") {
      scrollY = 0
    } elseif (c == "G") {
      scrollY = #lines - h
    } elseif (c == "q") {
      running = false
    }

    scrollX = math.max(scrollX, 0)
    scrollY = math.max(scrollY, 0)
  }

  term.clear()
  term.setCursorPos(1, 1)
}

M.openHandle = fn(any path) {
  if (path == "-") {
    return io.stdout
  }

  path = shell.resolve(path)
  let h = io.open(path, "w")

  assert(h, "No such file: " .. path)

  return h
}

return M
